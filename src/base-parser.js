/*
  baseParser: 

  Parsers are built from the source of S function and additional functions generated by
  the grammar parser.
*/


module.exports = function redes () {
  const MAX_OPS = 100000;
  const MAX_DEPTH = 1000;
  function $_parse(text) {
    var depth=0;
    const stack=[];
    var pos = 0;
    var state = {
      text: text,
      pos: 0,
    }
    var res = $_start(state);
    if (state.pos!==text.length) {
      var lines = state.text.slice(0,state.pos).split(/\n/);
      var line = lines.length;
      var col = lines.pop().length;
    }
    return res[0];
  }
  
  const $_token = (chars) => {
  	return (S)=> (
        S.text.substr(S.pos,chars.length) === chars
        && (S.pos+=chars.length,[chars])
    )
  }
  const $_itoken= (chars)=> {
  	return (S)=>{
      if(S.text.substr(S.pos,chars.length).toLowerCase() === chars) {
        S.pos+=chars.length;
        return ([chars]);
      }
    }
  }
  const $_char=(re)=> {
  	return (S)=>{ 
      var char = S.text.charAt(S.pos);
      return re.test(char) && (S.pos++,[char]);
    }
  }
  const $_any=() =>{
  	return (S) => S.pos < S.text.length && [S.text.charAt(S.pos++)];
  }
  const $_seq=(args,action) =>{
  	return (S)=>{ 
      const pos=S.pos;
      var ret = {};
      for (var arg of args) {
      	var res = arg[0](S);
        if(!res) return (S.pos=pos,false);
        if(arg[1]) ret[arg[1]] = res[0];
      }
      if (action) return ([action(ret)])
      return ([ret])
    }
  }
  const $_or=(args)=> {
  	return (S)=>{ 
      for (var arg of args) {
      	var res = arg(S);
        if (res) return (res);
      }
      return false
    }
  }
  const $_dollar=(arg)=> {
  	return (S)=>{
    	const pos=S.pos;
      if (!arg(S)) return (S.pos=pos,false);
      return ([S.text.slice(pos,S.pos)]);
    }
  }
  const $_amp=(arg)=> {
  	return (S)=>{
    	const pos=S.pos;
      var res = arg(S);
      S.pos = pos;
      if (!res) return false;
      return res;
    }
  }
  const $_bang=(arg)=> {
  	return (S)=>{
    	const pos=S.pos;
      var res = arg(S);
      S.pos = pos;
      if (res) return false;
      return [];
    }
  }
  const $_plus=(arg) =>{
  	return (S)=>{
      const pos=S.pos;
      var ret = [];
      do {
        var res = arg(S);
        if (!res) break;
        ret.push(res[0]);
      } while (true)
      if (!ret.length) return (S.pos=pos,false);
      return ([ret]);
    }   
  }
  const $_maybe=(arg) =>{
  	return (S)=>{
      const pos=S.pos;
      var res = arg(S);
      if (!res) return [];
      return (res);
    }   
  }
  const $_star=(arg)=> {
    return (S)=>{
      const pos=S.pos;
      var ret = [];
      do {
        var res = arg(S);
        if (!res) break;
        ret.push(res[0]);
      } while (true)
      return ([ret]);
    }   
  }
  
  /*###SPLIT###*/

  /*###SPLIT###*/

  return {parse:$_parse}
}
