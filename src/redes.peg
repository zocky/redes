{

	function indent (t) {
    	return "\n  "+t.replace(/\n/g,'\n  ')+"\n";
    }

	function str (str) { return JSON.stringify(String(str)) ;}
    
    function actionFn(names,action) {
     var actionArgs = `(state,{${names.join(',')}})`;
        try {
          var fn = new Function(`return(${action})`);
          var actionFn = `${actionArgs}=>(${action})`;
        } catch (err) {
          try {
            var fn = new Function(action);
            var actionFn = `${actionArgs}=>{${action}}`;
          } catch (err) {
            throw err
          }
        }
        return actionFn
    }
    const ops = {
      'literal':  ({literal})    =>  `R$L(${str(literal)})`,
      'iliteral': ({literal})    =>  `R$I(${str(literal)})`,
      'match':  ({char})     =>  `R$C(/[${char}]/)`,
      'imatch': ({char})     =>  `R$C(/[${char}]/i)`,
      'dot':    ()           =>  `R$D()`,
      'dollar': ({child})    =>  `R$T(${proc(child)})`,
      'star':   ({child})    =>  `R$S(${proc(child)})`,
      'plus':   ({child})    =>  `R$P(${proc(child)})`,
      'maybe':  ({child})    =>  `R$M(${proc(child)})`,
      'bang':   ({child})    =>  `R$B(${proc(child)})`,
      'amp':    ({child})    =>  `R$A(${proc(child)})`,
      'rule':   ({rule})     =>  {
        //if (!ruleNames.includes(rule)) error( 'Unknown rule '+rule);
        ruleDeps[curRule][rule]=true;
        if (compiledRules[rule]) return `R$$_${rule}`;
      	return `(R$$_${rule}||R$_${rule})`
       },
      'or':     ({children}) =>  `R$O([${children.map(proc).join(',')}])`,
      'seq':    ({children,action}) => {
        var names = [];
        var args = children.map(({op,name,child})=>{
          if (op) return `[${actionFn(names,child)},'${op}']`;
          if (!name) return `[${proc(child)}]`
          names.push(name);
          return `[${proc(child)},${str(name)}]`;
        })
		if (!action) return `R$Q([${args.join(',')}])`;
        var fn = actionFn(names,action);
        return `R$Q([${args.join(',')}],${fn})`;
      },
      'grammar': ({intro,defs}) => {
      	ruleNames = defs.map(def=>def.name);
        defs.reverse();
        ruleDeps = {};
        var done = {};
        compiledRules={};
        var rules = defs.map(def=>{
          curRule = def.name;
          var curDeps = ruleDeps[curRule]={};
          var procDef = proc(def.def);
          
          var futureDep = false;
          for (var d in curDeps) {
            if(!done[d]) {
              futureDep = true;
              break;
            }
          }
          done[curRule] = true;
          if (!futureDep) {
            compiledRules[def.name] = true;
            return `const R$$_${def.name}=${procDef};`
          }
  		    return `var R$$_${def.name}; const R$_${def.name}=(S)=>(R$$_${def.name}||(R$$_${def.name}=\n${procDef}))(S)`
        });
        //console.log(ruleDeps)
        return `${intro||''}\n\n${rules.join('\n')}\nconst R$START=(R$$_${ruleNames[0]}||R$_${ruleNames[0]})`;
      }
    };
    var curRule;
    var ruleDeps;
    var ruleNames;
    var compiledRules;
    function proc(node) {
    	if (Array.isArray(node)) return node.map(n=>proc(n));
        if (!node || !node.$) return node;
    	if (ops[node.$]) {
        	return ops[node.$](node);
        } else {
          var ret = {$:node.$};
          for (var i in node) {
            if (i=='$') continue;
            ret[i]=proc(node[i]);
          }
          return ret;
        }
    }
}

proc
= grammar:grammar _ !.{
  return proc(grammar);
}


grammar
= intro:action? _ defs:def+ {
  return {$:'grammar',intro,defs};
}
 
def
= _ head:def_head _ def:or eol {
  return {$:'def',name:head.name,def}
}

def_head 
= name:ident _ description:literal? _ "=" {
  return {name,description}
}

or 
= head: seq tail: (
  _ [|/] _ seq:seq { return seq }
)* { 
	if(!tail.length) return head;
    return {$:'or',children:[head].concat(tail)};
}

seq  
= children:(
   head: chunk tail: ( __ chunk:chunk { return chunk } )+ {return [head].concat(tail)} 
/ chunk:named_chunk { return [chunk] }
)
   action:action? {
   return {$:'seq',children,action}
}
/ piece:piece action:action {
  return {$:'seq',children:[{name:'match',child:piece}],action};
}
/ piece 

action = _ block:block { return block }

chunk
= named_chunk
/ anon_chunk
/ predicate

predicate
= op:[!&] _ child:action {
  return {op,child} 
}

named_chunk
= name:ident _ ":" _ child:piece {
	return {name,child}
}

anon_chunk =
child: piece {
	return {child}
}

piece
= "!" child:bit {
    return {$:'bang',child}
}
/ "&" child:bit {
    return {$:'amp',child}
}
/ "$" child:bit {
    return {$:'dollar',child}
}
/ bit 
bit
= star
/ plus
/ maybe
/ atom

rule
= rule:ident !(_ literal? _ "=") {
	return {$:'rule',rule}; 
}

maybe
= child:atom _ "?" {
    return {$:'maybe',child}
}

star
= child:atom _ "*" {
    return {$:'star',child}
}

plus
= child:atom _ "+" {
    return {$:'plus',child}
}

atom
= literal
/ match
/ dot
/ rule
/ "(" _ or:or _ ")" { return or }

literal
= literal:( literal1 / literal2 ) i:"i"? {
  try {
    let str = JSON.parse(`"${literal}"`)
    if (i) return {$:'iliteral',literal:str};
    return {$:'literal',literal:str};
  } catch (err) {
    error(err);
  }
}

literal1 
= [''] literal:cliteral1+ [''] { return literal.join('') }

cliteral1
= "\\'" { return "'" }
/ '"' { return '\\"' }
/ special
/ [^']

literal2 
= [""] literal:cliteral2+ [""] { return literal.join('') }

cliteral2
= '\\"'
/ special
/ [^"]

special
= '\\b' { return '\\u0008' }
/ '\\t' { return '\\u0009' }
/ '\\n'
/ '\\v' { return '\\u000B' }
/ '\\f' { return '\\u000C' }
/ '\\r' { return '\\u000D' }
/ '\\' d:(hex hex? hex?) { return '\\u'+ d.join('').parseInt(8).toString(16).padStart(4,'0')}
/ '\\u' u:(hex hex hex hex) { return '\\u'+u.join(''); }
/ '\\\\'


hex
= [0-9A-Fa-f]

match
= "[" char:$(("\\]"/[^\]])+) "]" i:"i"? {
  if (i) return {$:'imatch',char};
  return {$:'match',char}
}

dot
= dot:"." { 
  return {$:'dot'}
}

block 
= "{" _ chunks:block_chunk* _ "}" { return chunks.join('') }

block_chunk
= $([^'"{}`]+)
/ $("'" ("\\'"/[^\n'])* "'")
/ $('"' ('\\"'/[^\n"])* '"')
/ template
/ $(block)

template
= $('`' template_chunk* '`')

template_chunk
= $('\\$')
/ $('$' block)
/ $([^$`]+)
/ "$" !"{"

ident
= $([a-z_]i [a-z0-9]i*)+

eol = (_ "\n") + / _ !"."
_ = ws*
__ = ws+

ws 
= [ \n\t\r]
/ '//' [^\n]* "\n"
/ '/*' (!'*/' .)* '*/'

