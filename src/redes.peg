{

	function indent (t) {
    return "\n  "+t.replace(/\n/g,'\n  ')+"\n";
  }
  var cur_def;
  var def_dep={};

  var sorted = {};
  function sortDeps() {
    do {
      var keys = Object.keys(def_dep);
      keys.sort((a,b)=>{
        returnObject.keys(def_dep[a]).length - Object.keys(def_dep[b]).length; 
      });
      console.log('keys',keys.map(k=>[k,Object.keys(def_dep[k]).length]));
      return;
      outer: for (var k of keys) {
        for (var dep in def_dep[k]) {
          console.log('try',k,dep,!!sorted[dep])
          if (!sorted[dep]) continue outer;  
        }
        console.log('found',k)
        sorted[k] = true;
        delete def_dep[k];
      }
    } while(Object.keys(def_dep).length < keys.length)
    return Object.keys(sorted);
  }
}

grammar
= intro:action? _ defs:defs {
  return '\n'+(intro||'') + '\n' + defs;
}

defs
= defs:def+ {
  var methods = defs.map(def=>{
	  return `var comp_${def.name}; 
const rule_${def.name} = (S) => {
if (!comp_${def.name}) {
comp_${def.name} = ${def.rule}
}
return comp_${def.name}(S);
}`
  }).reverse();
  
  methods.push(`function $_start(S) {\n  return rule_${defs[0].name}(S)\n}`)
  
  return indent(methods.join('\n'))
}

def
= _ ident:ident _ "=" _ or:or eol {
  return {name:ident,rule:or}
}

or 
= head: seq tail: (
  _ [|/] _ seq:seq { return seq }
)* { 
	if(!tail.length) return head; 
    return `$_or([${indent([head].concat(tail).join(',\n'))}])`
}

seq  
= chunks:(
   head: chunk tail: ( __ chunk:chunk { return chunk } )+ {return [head].concat(tail)} 
/ chunk:named_chunk { return [chunk] }
)
   action:action? {
    var names = [];
    var args = [];
    chunks.forEach(chunk=>{
      if(chunk.name) {
        names.push(chunk.name);
        args.push(`[${chunk.piece},'${chunk.name}']`);
      } else {
        args.push(`[${chunk.piece}]`);
      }
    })
    var fn = '';
    if(action) {
    	try {
          new Function('','return ('+action+')')
 	   	  fn = `, ({${names.join(',')}}) => (\n${action}\n)`
        } catch(err) {
          try {
          	new Function('',action)
 	   	    fn = `, ({${names.join(',')}}) => {\n${action}\n}`
          } catch(err) {
            throw(err);
          }
        }
    }
    return `$_seq([${indent(args.join(',\n'))}]${fn})`
}
/ piece 

action = _ block:block { return block }

chunk
= named_chunk
/ anon_chunk

named_chunk
= name:ident _ ":" _ piece:piece {
	return {name,piece}
}

anon_chunk =
piece: piece {
	return {piece}
}

piece
= "!" bit:bit {
    return `$_bang(${bit})`
}
/ "&" bit:bit {
    return `$_amp(${bit})`
}
/ "$" bit:bit {
    return `$_dollar(${bit})`
}
/ "&" action {
    return `$_amp($_any())`
}
/ bit 
bit
= star
/ plus
/ maybe
/ atom

rule
=  !def ident:ident {
	return `comp_${ident}||rule_${ident}` 
}

maybe
= atom:atom _ "?" {
    return `$_maybe(${atom})`
}

star
= atom:atom _ "*" {
    return `$_star(${atom})`
}

plus
= atom:atom _ "+" {
    return `$_plus(${atom})`
}

atom
= token
/ char
/ dot
/ rule
/ "(" _ or:or _ ")" { return or }

token 
= [''] c:$("\\'"/[^'])+ [''] i:"i"? { 
  if (i) return `$_itoken('${c.toLowerCase()}')`;
  else return `$_token('${c}')`;
}
/ [""] c:$('\\"'/[^"])+ [""] i:"i"? { return `$_token("${c}",${!!i})`}

char
= "[" c:$(("\\]"/[^\]])+) "]" i:"i"? { return `$_char(/^[${c}]/${i||''})`}

dot
= dot:"." { return `$_dot()`}

block 
= "{" _ chunks:block_chunk* _ "}" { return chunks.join('') }

block_chunk
= $([^'"{}`]+)
/ $("'" ("\\'"/[^\n'])* "'")
/ $('"' ('\\"'/[^\n"])* '"')
/ template
/ $(block)

template
= $('`' template_chunk* '`')

template_chunk
= $('\\$')
/ $('$' block)
/ $([^$`]+)
/ "$" !"{"

ident
= $([a-z_]i [a-z0-9]i*)+

_ = [ \n\t\r]*
__ = [ \n\t\r]+

eol = (_ "\n") + / _ !"."
